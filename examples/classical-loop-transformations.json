{"1":["# Classical Loop Transformations","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"classicallooptransformations\">Classical Loop Transformations</h1>\n","markdown"],"2":["### Setup AST generation infrastructure","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h3 id=\"setupastgenerationinfrastructure\">Setup AST generation infrastructure</h3>\n","markdown"],"3":["def print_before_after(domain, schedule_original, schedule_new):\n    context = isl.set(\"{ : }\")\n    build = isl.ast_build.from_context(context)\n    schedule_original = schedule_original.intersect_domain(domain)\n    schedule_new = schedule_new.intersect_domain(domain)\n    print(\"<b>Before Transform:</b>\")\n    ast = build.node_from_schedule_map(schedule_original)\n    print_code(ast)\n    print(\"<b>After Transform:</b>\")\n    ast = build.node_from_schedule_map(schedule_new)\n    print_code(ast)","","python"],"4":["## Loop Reversal\n\nLoop reversal changes the direction in which elements of a loop are visited. After loop reversal, the previous first loop iteration is executed last and the previous last loop iteration is executed first.\n\n**Benefits**:\n- Can be used to shorten dependences","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"loopreversal\">Loop Reversal</h2>\n<p>Loop reversal changes the direction in which elements of a loop are visited. After loop reversal, the previous first loop iteration is executed last and the previous last loop iteration is executed first.</p>\n<p><strong>Benefits</strong>:</p>\n<ul>\n<li>Can be used to shorten dependences</li>\n</ul>\n","markdown"],"5":["domain = isl.union_set(\"[n] -> {S[i] : 0 <= i < n}\")\noriginal = isl.union_map(\"{S[i] -> [i]}\")\ntransformation = isl.union_map(\"{[i] -> [-i]}\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 < n; c0 += 1)\n  S(c0);\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = -n + 1; c0 <= 0; c0 += 1)\n  S(-c0);\n</code></pre>\n","python"],"6":["# Loop Fusion\n\nAfter Loop fusion two statements that have previously been enumerated by different loops are\nnow enumerated by a single loop.\n\n**Benefits:**\n  - Improves data-locality\n","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"loopfusion\">Loop Fusion</h1>\n<p>After Loop fusion two statements that have previously been enumerated by different loops are\nnow enumerated by a single loop.</p>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>Improves data-locality</li>\n</ul>\n","markdown"],"7":["domain = isl.union_set(\"[n] -> {S[i] : 0 <= i <= n; T[i] : 0 <= i <= n}\")\noriginal = isl.union_map(\"{S[i] -> [0, i]; T[i] -> [1, i]}\")\ntransformation = isl.union_map(\"{[0, i] -> [i,0]; [1, i] -> [i, 1]}\")\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">{\n  for (int c1 = 0; c1 <= n; c1 += 1)\n    S(c1);\n  for (int c1 = 0; c1 <= n; c1 += 1)\n    T(c1);\n}\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= n; c0 += 1) {\n  S(c0);\n  T(c0);\n}\n</code></pre>\n","python"],"8":["# Loop Fission (Loop Distribution)\n\nLoop fission takes two statements that have been originally executed in the same\nloop and distributes them to two separate loops.\n\n**Benefits:**\n - Reduces register pressure\n - Enables other transformations, i.e. SIMDization in case only one of\n   the two statements in a loop body allows for parallel execution.","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"loopfissionloopdistribution\">Loop Fission (Loop Distribution)</h1>\n<p>Loop fission takes two statements that have been originally executed in the same\nloop and distributes them to two separate loops.</p>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>Reduces register pressure</li>\n<li>Enables other transformations, i.e. SIMDization in case only one of\nthe two statements in a loop body allows for parallel execution.</li>\n</ul>\n","markdown"],"9":["domain = isl.union_set(\"[n] -> {S[i] : 0 <= i <= n; T[i] : 0 <= i <= n}\")\noriginal = isl.union_map(\"{S[i] -> [i, 0]; T[i] -> [i, 1]}\")\ntransformation = isl.union_map(\"{[i, 0] -> [0, i]; [i, 1] -> [1, i]}\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= n; c0 += 1) {\n  S(c0);\n  T(c0);\n}\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">{\n  for (int c1 = 0; c1 <= n; c1 += 1)\n    S(c1);\n  for (int c1 = 0; c1 <= n; c1 += 1)\n    T(c1);\n}\n</code></pre>\n","python"],"10":["# Loop Interchange","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"loopinterchange\">Loop Interchange</h1>\n","markdown"],"11":["domain = isl.union_set(\"[n,m] -> {S[i,j] : 0 <= i <= n and 0 <= j <= m }\")\noriginal = isl.union_map(\"{S[i,j] -> [i, j]}\")\ntransformation = isl.union_map(\"{[i, j] -> [j, i]}\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= n; c0 += 1)\n  for (int c1 = 0; c1 <= m; c1 += 1)\n    S(c0, c1);\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= m; c0 += 1)\n  for (int c1 = 0; c1 <= n; c1 += 1)\n    S(c1, c0);\n</code></pre>\n","python"],"12":["# Strip Mining\n\nStrip mining partitions a single loop into chunks that are enumerated by two loops.\nAn outer loop enumerates the individual blocks, whereas the inner loop enumerates\nthe individual iterations that belong to each block.\n\n**Benefits:**\n - Building block for loop tiling and unroll-and-jam.","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"stripmining\">Strip Mining</h1>\n<p>Strip mining partitions a single loop into chunks that are enumerated by two loops.\nAn outer loop enumerates the individual blocks, whereas the inner loop enumerates\nthe individual iterations that belong to each block.</p>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>Building block for loop tiling and unroll-and-jam.</li>\n</ul>\n","markdown"],"13":["domain = isl.union_set(\"{S[i] : 0 <= i < 1024 }\")\noriginal = isl.union_map(\"{S[i] -> [i]}\")\ntransformation = isl.union_map(\"{[i] -> [floor(i/4), i % 4]}\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= 1023; c0 += 1)\n  S(c0);\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= 255; c0 += 1)\n  for (int c1 = 0; c1 <= 3; c1 += 1)\n    S(4 * c0 + c1);\n</code></pre>\n","python"],"14":["# Loop Tiling\n\nLoop tiling partitions the execution of a multi-dimensional loop into groups, the tiles.\nFirst a set of outer loops enumerate all tiles that must be executed and for each tile\na set of inner loops, the point loops, enumerates the individual points of the tile.\n\n**Benefits:**\n - Increased data-locality\n - More coarse-grained parallelism","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"looptiling\">Loop Tiling</h1>\n<p>Loop tiling partitions the execution of a multi-dimensional loop into groups, the tiles.\nFirst a set of outer loops enumerate all tiles that must be executed and for each tile\na set of inner loops, the point loops, enumerates the individual points of the tile.</p>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>Increased data-locality</li>\n<li>More coarse-grained parallelism</li>\n</ul>\n","markdown"],"15":["domain = isl.union_set(\"{S[i,j] : 0 <= i,j < 1024 }\")\noriginal = isl.union_map(\"{S[i,j] -> [i,j]}\")\ntransformation = isl.union_map(\"{[i,j] -> [floor(i/4), i % 4, floor(j/4), j % 4]}\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= 1023; c0 += 1)\n  for (int c1 = 0; c1 <= 1023; c1 += 1)\n    S(c0, c1);\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= 255; c0 += 1)\n  for (int c1 = 0; c1 <= 3; c1 += 1)\n    for (int c2 = 0; c2 <= 255; c2 += 1)\n      for (int c3 = 0; c3 <= 3; c3 += 1)\n        S(4 * c0 + c1, 4 * c2 + c3);\n</code></pre>\n","python"],"16":["# Unroll-and-jam\n\nUnroll-and-jam is a combination of strip-mining of the outer loop into a\ntile and point loop and then an interchange of the new point loop with\nthe innermost loop dimension.\n\n**Benefits:**\n - Enables outer loop vectorization","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"unrollandjam\">Unroll-and-jam</h1>\n<p>Unroll-and-jam is a combination of strip-mining of the outer loop into a\ntile and point loop and then an interchange of the new point loop with\nthe innermost loop dimension.</p>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>Enables outer loop vectorization</li>\n</ul>\n","markdown"],"17":["domain = isl.union_set(\"{S[i,j] : 0 <= i,j < 1024 }\")\noriginal = isl.union_map(\"{S[i,j] -> [i,j]}\")\ntransformation = isl.union_map(\"{[i,j] -> [floor(i/4), j, i % 4] }\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= 1023; c0 += 1)\n  for (int c1 = 0; c1 <= 1023; c1 += 1)\n    S(c0, c1);\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 <= 255; c0 += 1)\n  for (int c1 = 0; c1 <= 1023; c1 += 1)\n    for (int c2 = 0; c2 <= 3; c2 += 1)\n      S(4 * c0 + c2, c1);\n</code></pre>\n","python"],"18":["# Skewing\n","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"skewing\">Skewing</h1>\n","markdown"],"19":["domain = isl.union_set(\"[n] -> {S[i,j] : 0 <= i,j < n }\")\noriginal = isl.union_map(\"{S[i,j] -> [i,j]}\")\ntransformation = isl.union_map(\"{[i,j] -> [i, i + j]}\")\n\ntransformed = original.apply_range(transformation)\nprint_before_after(domain, original, transformed)","<b>Before Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 < n; c0 += 1)\n  for (int c1 = 0; c1 < n; c1 += 1)\n    S(c0, c1);\n</code></pre>\n<b>After Transform:</b>\n<pre class='code'><code class=\"cpp hljs\">for (int c0 = 0; c0 < n; c0 += 1)\n  for (int c1 = c0; c1 < n + c0; c1 += 1)\n    S(c0, -c0 + c1);\n</code></pre>\n","python"],"20":["","",""]}